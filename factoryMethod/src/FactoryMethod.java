public interface FactoryMethod {
    /*
    данный шаблон делегирует создание объектов наследникам родительского класса.
    Это позволяет использовать в коде программы не конкретные классы,
    а манипулировать абстрактными объектами на более высоком уровне.
    ---------------------------------------------------------------------
    Используется в случаях, когда у некого класса есть множество классов наследников,
    и в зависимости от входных данных нам необходимо получить один из этих классов наследников

    Есть родительский интерфейс Developer с методом, мы создаем разные классы и имплементируем этот интерфейс
    а так же реализуем данный метод
    Далее создаем интерфейс FactoryMethod который просто возвращает суперкласс (интерфейс) абстрактный девелопер
    и для каждого вида разработчика мы создаем свою фабрику по производству нужных нам разработчиков javaDeveloperFactory,
    который в свою очередь создает просто нового разработчика
    и вызов происходит просто FactoryMethod dev = new JavaDeveloperFactory(); или любой другой
    и так как у всех девелоперов есть один и тот же метод, который просто выполняется по другому, заменой в одном месте
    мы меняем реализацию этих методов

    ГЛАВНАЯ МЫСЛЬ: ДЕЛЕГИРОВАТЬ СОЗДАНИЕ ОБЪЕКТОВ ДОЧЕРНИМ КЛАССАМ
     */
    Developer createDeveloper();
}
